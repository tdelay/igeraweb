# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions
env:
  APP_NAME: igeraweb
  SOURCE_FOLDER: ./

name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: npm run build && rm -rf node_modules
  
    - name: Set SHA
      id: vars
      run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    
    - name: Login to DockerHub
      uses: docker/login-action@v1 
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Push to Docker Hub
      uses: docker/build-push-action@v2
      with:
        platforms: linux/arm64
        context: .
        file: ./Dockerfile
        builder: ${{ steps.buildx.outputs.name }}
        push: true
        tags: todelay/${{ env.APP_NAME }}:${{ steps.vars.outputs.sha_short }}
        # cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.APP_NAME }}:buildcache
        # cache-to: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.APP_NAME }}:buildcache,mode=max

    - name: Save SHA
      env: 
        TAG: ${{ steps.vars.outputs.sha_short }}
      run: |
         envsubst < deployment/base/deployment.yaml > tempbase
         cat tempbase > deployment/base/deployment.yaml
         rm tempbase
    
    - name: 'Upload Deploy'
      uses: actions/upload-artifact@v4
      with:
        name: deployment
        path: deployment
        retention-days: 5
    
  dev:
    name: Deploy To Dev
    environment:
      name: dev
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Kubectl tool installer
      uses: Azure/setup-kubectl@v1
  
    - name: Setup kubectl
      env: 
        K8S_CONFIG: ${{ secrets.K8S_CONFIG }}
      run: |
        mkdir -p $HOME/.kube
        echo "${K8S_CONFIG}" | base64 --decode > $HOME/.kube/config
      
    - name: Download Deploy
      uses: actions/download-artifact@v4
      with:
        name: deployment
      
    - name: Apply pods
      run: |
        kubectl create namespace igera-dev --dry-run=client -o yaml | kubectl apply -f -
        kubectl apply -k dev --namespace=igera-dev
        
    - name: Wait For Deployment To Start
      run: sleep 10s
      
    - name: Verify Deployment
      run: |
        echo "Checking deployment status..."
        kubectl get pods -n igera-dev -l app=${{ env.APP_NAME }}
        kubectl wait --for=condition=ready pod -l app=${{ env.APP_NAME }} --namespace=igera-dev --timeout=5m
        echo "âœ… Deployment successful! Pods are running."
      
  # prod:
  #   name: Deploy To Prod
  #   environment:
  #     name: prod
  #   runs-on: ubuntu-latest
  #   needs: dev
    
  #   steps:
  #   - name: Kubectl tool installer
  #     uses: Azure/setup-kubectl@v1
  
  #   - name: Setup kubectl
  #     env: 
  #       K8S_CONFIG: ${{ secrets.K8S_CONFIG }}
  #     run: |
  #       mkdir -p $HOME/.kube
  #       echo "${K8S_CONFIG}" | base64 --decode > $HOME/.kube/config
      
  #   - name: Download Deploy
  #     uses: actions/download-artifact@v2
  #     with:
  #       name: deployment
      
  #   - name: Apply pods
  #     run: kubectl apply -k prod -n prod
      
  #   - name: Wait For Deployment To Start
  #     run: sleep 10s
      
  #   - name: Wait For Pods To Start
  #     run: kubectl wait --for=condition=ready pod -l app=${{ env.APP_NAME }} -n prod --timeout=10m

    
